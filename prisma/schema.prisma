// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserPermission {
  OWNER
  ADMIN
  CAN_EDIT
  READ_ONLY
}

enum UseCase {
  WORK
  STUDY
  PERSONAL_USE
}

model User {
  id                 Int                 @id @default(autoincrement())
  email              String              @unique
  name               String
  username           String              @unique
  password           String
  image              String?
  completeOnBoarding Boolean             @default(false)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  RefreshToken       RefreshToken[]
  workspaces         WorkSpace[]
  Subscriptions      Subscription[]
  useCase            UseCase?
  createdTasks       Task[]              @relation("TaskCreatedByUser")
  updatedTasks       Task[]              @relation("TaskUpdatedByUser")
  createdMindMaps    MindMap[]           @relation("MindMapCreatedByUser")
  updatedMindMaps    MindMap[]           @relation("MindMapUpdatedByUser")
  PomodoroSetting    PomodoroSetting[]
  AssignedToTask     AssignedToTask[]
  AssignedToMindmap  AssignedToMindmap[]
  Message            Message[]
  Notification       Notification[]
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model WorkSpace {
  id               Int            @id @default(autoincrement())
  name             String
  image            String?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  userId           Int?
  user             User?          @relation(fields: [userId], references: [id], onDelete: Cascade)
  Subscriber       Subscription[]
  inviteCode       String         @unique
  adminCode        String         @unique
  canEditCode      String         @unique
  readOnlyCode     String         @unique
  Invitation       Invitation[]
  tasks            Task[]
  tags             Tag[]
  mindMaps         MindMap[]
  Conversation     Conversation[]
  WorkspaceProject Project[]

  @@index([userId])
}

model Subscription {
  userId      Int
  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspaceId Int
  workspace   WorkSpace      @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  useRole     UserPermission @default(READ_ONLY)

  @@id([userId, workspaceId])
  @@index([workspaceId])
  @@index([userId])
}

model Invitation {
  id          Int            @id @default(autoincrement())
  email       String
  workspaceId Int
  workspace   WorkSpace      @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  token       String
  userRole    UserPermission @default(READ_ONLY)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}

model Task {
  id             Int              @id @default(autoincrement())
  title          String?          @default("Untitled task")
  emoji          String           @default("ðŸ§ ")
  content        Json?
  date           DateTime?
  creatorId      Int
  creator        User             @relation(name: "TaskCreatedByUser", fields: [creatorId], references: [id])
  updatedUserId  Int?
  updatedBy      User?            @relation(name: "TaskUpdatedByUser", fields: [updatedUserId], references: [id])
  workspaceId    Int
  workspace      WorkSpace        @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  projectId      Int
  project        Project          @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  taskTags       TaskTag[]
  AssignedToTask AssignedToTask[]

  @@index([workspaceId])
}

model Tag {
  id          Int          @id @default(autoincrement())
  name        String
  isActive    Boolean
  color       CustomColors @default(RED)
  WorkSpace   WorkSpace?   @relation(fields: [workSpaceId], references: [id])
  workSpaceId Int?
  taskTags    TaskTag[]
  MindMapTag  MindMapTag[]

  @@index([workSpaceId])
}

model TaskTag {
  taskId Int
  tagId  Int

  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  tag  Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([taskId, tagId])
  @@index([tagId])
}

model MindMap {
  id                Int                 @id @default(autoincrement())
  title             String
  content           Json?
  emoji             String              @default("ðŸ§ ")
  updatedUserId     Int?
  updatedBy         User?               @relation(name: "MindMapUpdatedByUser", fields: [updatedUserId], references: [id])
  creatorId         Int
  creator           User                @relation(name: "MindMapCreatedByUser", fields: [creatorId], references: [id])
  WorkSpace         WorkSpace?          @relation(fields: [workSpaceId], references: [id])
  workSpaceId       Int?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  MindMapTag        MindMapTag[]
  AssignedToMindmap AssignedToMindmap[]

  @@index([workSpaceId])
  @@index([updatedUserId])
  @@index([creatorId])
}

model MindMapTag {
  mindMapId Int
  tagId     Int

  mindmap MindMap @relation(fields: [mindMapId], references: [id], onDelete: Cascade)
  tag     Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([mindMapId, tagId])
  @@index([tagId])
}

model Project {
  id          Int       @id @default(autoincrement())
  title       String
  WorkSpace   WorkSpace @relation(fields: [workSpaceId], references: [id], onDelete: Cascade)
  workSpaceId Int
  tasks       Task[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model AssignedToTask {
  taskId Int
  task   Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, taskId])
  @@index([userId, taskId])
}

model AssignedToMindmap {
  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  mindmapId Int
  mindmap   MindMap @relation(fields: [mindmapId], references: [id], onDelete: Cascade)

  @@id([userId, mindmapId])
  @@index([userId, mindmapId])
}

model PomodoroSetting {
  id                 Int         @id @default(autoincrement())
  userId             Int
  user               User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  workDuration       Int         @default(25)
  shortBreakDuration Int         @default(5)
  longBreakDuration  Int         @default(15)
  longBreakinterval  Int         @default(2)
  rounds             Int         @default(3)
  soundEffect        SoundEffect @default(ANALOG)
  soundEffectVolume  Float       @default(0.5)

  @@index([userId])
}

model Conversation {
  id          Int       @id @default(autoincrement())
  WorkSpace   WorkSpace @relation(fields: [workSpaceId], references: [id], onDelete: Cascade)
  workSpaceId Int

  Messages     Message[]
  Notification Notification[]
}

model Message {
  id                 Int                  @id @default(autoincrement())
  Conversation       Conversation         @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId     Int
  sender             User                 @relation(fields: [senderId], references: [id])
  senderId           Int
  content            String
  edited             Boolean              @default(false)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  AdditionalResource AdditionalResource[]
  Notification       Notification[]
}

model AdditionalResource {
  id        Int                     @id @default(autoincrement())
  message   Message?                @relation(fields: [messageId], references: [id])
  messageId Int?
  type      AdditionalResourceTypes
  name      String
}

model Notification {
  id             String           @id @default(cuid())
  type           NotificationType
  userId         Int
  user           User             @relation(fields: [userId], references: [id])
  messageId      Int?
  message        Message?         @relation(fields: [messageId], references: [id])
  conversationId Int
  conversation   Conversation     @relation(fields: [conversationId], references: [id])
  isRead         Boolean          @default(false)
  createdAt      DateTime         @default(now())
}

enum NotificationType {
  MESSAGE
  MENTION
  REACTION
  SYSTEM
}

enum AdditionalResourceTypes {
  PDF
  Image
  UNKNOWN
}

enum SoundEffect {
  ANALOG
  BIRD
  CHURCH_BELL
  DIGITAL
  FANCY
  BELL
}

enum CustomColors {
  PURPLE
  RED
  GREEN
  BLUE
  PINK
  YELLOW
  ORANGE
  CYAN
  LIME
  EMERALD
  INDIGO
  FUCHSIA
}
